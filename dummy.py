# -*- coding: utf-8 -*-
"""
@author: Pieter Spaepen
dummy values to have main running without truss, element & node

"""
import numpy as np

def dummy():    
    class nnn:
        nodeNr=0
    n1=nnn()
    setattr(n1,'nodeNr',1) 
    setattr(n1,'xPos',0) 
    setattr(n1,'yPos',0) 
    setattr(n1,'xDisp',0) 
    setattr(n1,'yDisp',0) 
    setattr(n1,'Fx',np.nan) 
    setattr(n1,'Fy',np.nan)
    n2=nnn()
    setattr(n2,'nodeNr',2) 
    setattr(n2,'xPos',3*12) 
    setattr(n2,'yPos',0) 
    setattr(n2,'xDisp',np.nan) 
    setattr(n2,'yDisp',np.nan) 
    setattr(n2,'Fx',np.nan) 
    setattr(n2,'Fy',np.nan)
    n3=nnn()
    setattr(n3,'nodeNr',3) 
    setattr(n3,'xPos',0) 
    setattr(n3,'yPos',3*12) 
    setattr(n3,'xDisp',0) 
    setattr(n3,'yDisp',0) 
    setattr(n3,'Fx',np.nan) 
    setattr(n3,'Fy',np.nan)
    n4=nnn()
    setattr(n4,'nodeNr',4) 
    setattr(n4,'xPos',3*12) 
    setattr(n4,'yPos',3*12) 
    setattr(n4,'xDisp',np.nan) 
    setattr(n4,'yDisp',np.nan) 
    setattr(n4,'Fx',np.nan) 
    setattr(n4,'Fy',-500)
    n5=nnn()
    setattr(n5,'nodeNr',5) 
    setattr(n5,'xPos',6*12) 
    setattr(n5,'yPos',3*12) 
    setattr(n5,'xDisp',np.nan) 
    setattr(n5,'yDisp',np.nan) 
    setattr(n5,'Fx',np.nan) 
    setattr(n5,'Fy',-500)
    class el:
        '''
        def setStress(self,U):
            U_relevant = np.array([U[(self.firstNode.nodeNr*2)-2], U[(self.firstNode.nodeNr*2)-1], U[(self.secondNode.nodeNr*2)-2], U[(self.secondNode.nodeNr*2)-1]])
            T_inv = np.array([[np.cos(self.elementAngle),np.sin(self.elementAngle),0,0], \
                 [-np.sin(self.elementAngle),np.cos(self.elementAngle),0,0], \
                 [0,0,np.cos(self.elementAngle),np.sin(self.elementAngle)], \
                 [0,0,-np.sin(self.elementAngle),np.cos(self.elementAngle)]])
            u = np.matmul(T_inv,U_relevant)
            self.elementStress = (self.elementEmodulus/self.elementLength)*(u[0]-u[2])
        '''
        elementNr = 0
    el1=el()    
    setattr(el1,'elementNr',0)
    setattr(el1,'firstNode',n1)          
    setattr(el1,'secondNode',n2)         
    setattr(el1,'elementLength',36)      
    setattr(el1,'elementArea',8)        
    setattr(el1,'elementEmodulus',1.9*10**6)    
    setattr(el1,'elementStiffness',422222)    
    setattr(el1,'elementInertia',1)     
    setattr(el1,'elementAngle',0)       
    setattr(el1,'elementStress',np.nan)      
    setattr(el1,'elementBuckleRisk',np.nan)
    el2=el()    
    setattr(el2,'elementNr',1)
    setattr(el2,'firstNode',n3)          
    setattr(el2,'secondNode',n2)         
    setattr(el2,'elementLength',51)      
    setattr(el2,'elementArea',8)        
    setattr(el2,'elementEmodulus',1.9*10**6)    
    setattr(el2,'elementStiffness',298556)    
    setattr(el2,'elementInertia',1)     
    setattr(el2,'elementAngle',-0.78539)       
    setattr(el2,'elementStress',np.nan)      
    setattr(el2,'elementBuckleRisk',np.nan)  
    el3=el()    
    setattr(el3,'elementNr',2)
    setattr(el3,'firstNode',n3)          
    setattr(el3,'secondNode',n4)         
    setattr(el3,'elementLength',36)      
    setattr(el3,'elementArea',8)        
    setattr(el3,'elementEmodulus',1.9*10**6)    
    setattr(el3,'elementStiffness',422222)    
    setattr(el3,'elementInertia',1)     
    setattr(el3,'elementAngle',0)       
    setattr(el3,'elementStress',np.nan)      
    setattr(el3,'elementBuckleRisk',np.nan)  
    el4=el()    
    setattr(el4,'elementNr',3)
    setattr(el4,'firstNode',n2)          
    setattr(el4,'secondNode',n4)         
    setattr(el4,'elementLength',36)      
    setattr(el4,'elementArea',8)        
    setattr(el4,'elementEmodulus',1.9*10**6)    
    setattr(el4,'elementStiffness',422222)    
    setattr(el4,'elementInertia',1)     
    setattr(el4,'elementAngle',1.5707)       
    setattr(el4,'elementStress',np.nan)      
    setattr(el4,'elementBuckleRisk',np.nan)  
    el5=el()    
    setattr(el5,'elementNr',4)
    setattr(el5,'firstNode',n2)          
    setattr(el5,'secondNode',n5)         
    setattr(el5,'elementLength',51)      
    setattr(el5,'elementArea',8)        
    setattr(el5,'elementEmodulus',1.9*10**6)    
    setattr(el5,'elementStiffness',298556)    
    setattr(el5,'elementInertia',1)     
    setattr(el5,'elementAngle',0.78539)       
    setattr(el5,'elementStress',np.nan)      
    setattr(el5,'elementBuckleRisk',np.nan)  
    el6=el()    
    setattr(el6,'elementNr',5)
    setattr(el6,'firstNode',n4)          
    setattr(el6,'secondNode',n5)         
    setattr(el6,'elementLength',36)      
    setattr(el6,'elementArea',8)        
    setattr(el6,'elementEmodulus',1.9*10**6)    
    setattr(el6,'elementStiffness',422222)    
    setattr(el6,'elementInertia',1)     
    setattr(el6,'elementAngle',0)       
    setattr(el6,'elementStress',np.nan)      
    setattr(el6,'elementBuckleRisk',np.nan)  
    class Trr:
        elementList=[]
        def getHighestNodeNr(self):
            return 5
    Tr = Trr()
    setattr(Tr,'elementList',[el1, el2, el3, el4, el5, el6])
    return Tr